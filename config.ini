[logic pacakges]
; ; Uncomment following exmaple and replace with your cohesive packages in each module. 
; InThisModule = [
; 	  "all.sub.packages.in.this.package.should.be.consideres.as.whole"
; 	]
; InAnotherModule = [
; 	  "you.can.set",
; 	  "multiple.packages"
; 	]
; 
[layers]
; ; Desired layers
; application = []
; business = [
; 	  {
; 	    "module": "In_this_module",
; 	    "package": "in.this.packqge",
; 	    "name": "OnlyThisClassBelongsToBusinessLayer"
; 	  }
; 	]
; service = [
; 	  {
; 	    "module": "Whole_module_belongs_to_service_layer"
; 	  }
; 	]
; platform = [
; 	  {
; 	    "module": "In_this_module",
; 	    "package": "only.this.package.belongs.to.platform.layer"
; 	  }
; 	]
; 
[bad smells]
; ; Uncomment following smells and replace with your rules 
; SmellCylicDependency
; SmellDependency = [
; 	  {
; 	    "from": {
; 	      "module": "OneModule"
; 	    },
; 	    "to": {
; 	      "module": "AnotherModule"
; 	    }
; 	  },
; 	  {
; 	    "from": {
; 	      "module": "OneModule"
; 	    },
; 	    "to": {
; 	      "package": "one.package",
; 	      "module": "InAnotherModule"
; 	    }
; 	  },
; 	  {
; 	    "from": {
; 	      "module": "OneModule"
; 	    },
; 	    "to": {
; 	      "name": "OneClass",
; 	      "package": "in.one.package",
; 	      "module": "InAnsotherModule"
; 	    }
; 	  }
; 	]
; SmellDependencyCrossModule
; SmellDependencyCrossPackage
; 
